name: 'CI - Build, Test & Push to ECR'
'on':
  push:
    branches:
      - feat_*
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Service to deploy'
        required: true
        default: 'frontend-service'
      image_tag:
        description: 'Image tag to deploy'
        required: true
        default: 'v1.0'

        
env:
  AWS_REGION: us-east-1
  SERVICE_NAME: frontend-service
jobs:
  lint_test:
    name: Lint & Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Node.js (for linting)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Dependencies
        run: npm install
      - name: Lint Prettier
        run: npm run prettier
        continue-on-error: true
      - name: Lint Lint
        run: npm run lint
        continue-on-error: true
      - name: Run Tests
        run: npm run vue-i18n-extract
        continue-on-error: true
  build_and_push:
    name: Build & Push Docker Image
    needs: lint_test
    runs-on: ubuntu-latest
    outputs:
      image_tag: '${{ steps.set-tag.outputs.tag }}'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ env.AWS_REGION }}'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: 'Build, Tag, and Push image'
        env:
          ECR_REGISTRY: '${{ steps.login-ecr.outputs.registry }}'
          IMAGE_TAG: '${{ vars.FEAT_TAG }}'
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/${{secrets.ECR_REPOSITORY}}:$IMAGE_TAG .

          # Push the Docker image to ECR
          docker push $ECR_REGISTRY/${{secrets.ECR_REPOSITORY}}:$IMAGE_TAG
          echo "Successfully pushed image with tag: $IMAGE_TAG"
